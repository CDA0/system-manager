---
- name: Install gnupg
  pacman:
    name:
      - pinentry
      - gnupg
    state: present

- name: configure gnupg default cache for ssh
  lineinfile:
    path: "/home/{{ item.name }}/.gnupg/gpg-agent.conf"
    regexp: '^default-cache-ttl-ssh'
    line: "default-cache-ttl-ssh 60480000"
    create: yes
  loop: "{{ users }}"

- name: configure gnupg max cache for ssh
  lineinfile:
    path: "/home/{{ item.name }}/.gnupg/gpg-agent.conf"
    regexp: '^max-cache-ttl-ssh'
    line: "max-cache-ttl-ssh 60480000"
    create: yes
  loop: "{{ users }}"

- name: configure gnupg pinentry
  lineinfile:
    path: "/home/{{ item.name }}/.gnupg/gpg-agent.conf"
    regexp: '^pinentry-program '
    line: "pinentry-program /usr/bin/pinentry-curses"
    create: yes
  loop: "{{ users }}"

- name: Enable gpg-agent
  systemd:
    name: gpg-agent.socket
    scope: user
    enabled: yes
    state: started
  become: yes
  become_user: "{{ item.name }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ item.uid }}"
  loop: "{{ users }}"

- name: Enable dirmngr
  systemd:
    name: dirmngr.socket
    scope: user
    enabled: yes
    state: started
  become: yes
  become_user: "{{ item.name }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ item.uid }}"
  loop: "{{ users }}"

- name: Enable gpg-agent-ssh
  systemd:
    name: gpg-agent-ssh.socket
    scope: user
    enabled: yes
    state: started
  become: yes
  become_user: "{{ item.name }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ item.uid }}"
  loop: "{{ users }}"

# If using SSH Auth add the keygrip to ~/.gnupg/sshcontrol with:
# gpg --list-keys --with-keygrip | grep -A 1 '\[A\]' | awk '{ getline; print $3 }'
